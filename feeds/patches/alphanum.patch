diff --git a/include/letmecreate/click/alphanum.h b/include/letmecreate/click/alphanum.h
index 4c1e770..28a2545 100644
--- a/include/letmecreate/click/alphanum.h
+++ b/include/letmecreate/click/alphanum.h
@@ -10,20 +10,13 @@
 #ifndef __LETMECREATE_CLICK_ALPHANUM_H__
 #define __LETMECREATE_CLICK_ALPHANUM_H__
 
-#ifdef __cplusplus
-extern "C"{
-#endif
-
 #include <stdint.h>
 #include <letmecreate/click/export.h>
 
 /**
  * @brief Initialise the Alphanum Click.
  *
- * During initialisation, a thread is spawned and is in charge of selecting
- * left and right display in turns to give the illusion that both displays are
- * used at the same time. The refresh rate is 100Hz: selecting left display
- * during 5ms, then selecting right display during 5ms.
+ * During initialisation, the left display is selected.
  *
  * @param[in] mikrobus_index Index of the mikrobus (see #MIKROBUS_INDEX)
  * @return 0 if successful, -1 otherwise
@@ -65,14 +58,17 @@ int LETMECREATE_CLICK_EXPORT alphanum_click_write(char a, char b);
 int LETMECREATE_CLICK_EXPORT alphanum_click_raw_write(uint16_t a, uint16_t b);
 
 /**
- * @brief Stop refreshing both displays.
+ * @brief Select the left display.
  *
  * @return 0 if successful, -1 otherwise
  */
-int LETMECREATE_CLICK_EXPORT alphanum_click_release(void);
+int LETMECREATE_CLICK_EXPORT alphanum_click_select_left_display(void);
 
-#ifdef __cplusplus
-}
-#endif
+/**
+ * @brief Select the right display.
+ *
+ * @return 0 if successful, -1 otherwise
+ */
+int LETMECREATE_CLICK_EXPORT alphanum_click_select_right_display(void);
 
 #endif
diff --git a/src/click/alphanum.c b/src/click/alphanum.c
index 8a94e69..7a9497b 100644
--- a/src/click/alphanum.c
+++ b/src/click/alphanum.c
@@ -1,11 +1,9 @@
 #include <ctype.h>
-#include <pthread.h>
-#include <stdbool.h>
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
+#include <time.h>
 #include <letmecreate/click/alphanum.h>
-#include <letmecreate/click/common.h>
 #include <letmecreate/core/common.h>
 #include <letmecreate/core/gpio.h>
 #include <letmecreate/core/spi.h>
@@ -13,9 +11,6 @@
 static uint8_t gpio_pin_le2 = 0;
 static uint8_t gpio_pin_oe = 0;
 static uint8_t gpio_pin_oe2 = 0;
-static pthread_t thread;
-static pthread_mutex_t mutex;
-static volatile bool thread_running = false;
 
 /*
  * Translation table between a character and a 14 segment display value.
@@ -77,37 +72,6 @@ static const uint16_t alphanum_click_char_table[51] = {
     0x0800,        // '_'
 };
 
-static void select_left_display(void)
-{
-    gpio_set_value(gpio_pin_oe, 1);
-    gpio_set_value(gpio_pin_oe2, 0);
-}
-
-static void select_right_display(void)
-{
-    gpio_set_value(gpio_pin_oe2, 1);
-    gpio_set_value(gpio_pin_oe, 0);
-}
-
-static void* refresh_display(void __attribute__ ((unused))*arg)
-{
-    thread_running = true;
-
-    while (thread_running) {
-        pthread_mutex_lock(&mutex);
-        select_left_display();
-        pthread_mutex_unlock(&mutex);
-        sleep_ms(5);
-
-        pthread_mutex_lock(&mutex);
-        select_right_display();
-        pthread_mutex_unlock(&mutex);
-        sleep_ms(5);
-    }
-
-    return NULL;
-}
-
 /*
  * Convert char to 14 segment display value.
  */
@@ -133,79 +97,60 @@ int alphanum_click_get_char(char c, uint16_t *value)
  */
 int alphanum_click_raw_write(uint16_t a, uint16_t b)
 {
-    int ret = 0;
-
-    /* Acquire lock to ensure that the display is not refreshed when writing
-     * new characters.
-     */
-    pthread_mutex_lock(&mutex);
-
     /* Set all GPIO to 1 */
     if (gpio_set_value(gpio_pin_le2, 1) < 0
     ||  gpio_set_value(gpio_pin_oe, 1) < 0
-    ||  gpio_set_value(gpio_pin_oe2, 1) < 0) {
-        ret = -1;
-        goto alphanum_click_raw_write_end;
-    }
+    ||  gpio_set_value(gpio_pin_oe2, 1) < 0)
+        return -1;
 
     /* Write b */
     if (spi_transfer((uint8_t *) &b, NULL, sizeof(b)) < 0) {
         fprintf(stderr, "alphanum: spi write register failed.\n");
-        ret = -1;
-        goto alphanum_click_raw_write_end;
+        return -1;
     }
 
     /* Enable output A */
     if (gpio_set_value(gpio_pin_oe, 0)) {
         fprintf(stderr, "alphanum: Cannot set value\n");
-        ret = -1;
-        goto alphanum_click_raw_write_end;
+        return -1;
     }
 
     /* Write a */
     if (spi_transfer((uint8_t *) &a, NULL, sizeof(a)) < 0) {
         fprintf(stderr, "spi write register failed.\n");
-        ret = -1;
-        goto alphanum_click_raw_write_end;
+        return -1;
     }
 
     /* Latch B */
     if (gpio_set_value(gpio_pin_le2, 0)) {
         fprintf(stderr, "alphanum: cannot set value\n");
-        ret = -1;
-        goto alphanum_click_raw_write_end;
+        return -1;
     }
 
     /* Disable Latch B */
     if (gpio_set_value(gpio_pin_le2, 1)) {
         fprintf(stderr, "alphanum: cannot set value\n");
-        ret = -1;
-        goto alphanum_click_raw_write_end;
+        return -1;
     }
 
     /* Enable, disable B */
     if (gpio_set_value(gpio_pin_oe2, 0)) {
         fprintf(stderr, "alphanum: cannot set value\n");
-        ret = -1;
-        goto alphanum_click_raw_write_end;
+        return -1;
     }
 
     if (gpio_set_value(gpio_pin_oe2, 1)) {
         fprintf(stderr, "alphanum: cannot set value\n");
-        ret = -1;
-        goto alphanum_click_raw_write_end;
+        return -1;
     }
 
     /* Enable a */
     if (gpio_set_value(gpio_pin_oe, 0)) {
         fprintf(stderr, "alphanum: cannot set value\n");
-        ret = -1;
-        goto alphanum_click_raw_write_end;
+        return -1;
     }
 
-alphanum_click_raw_write_end:
-    pthread_mutex_unlock(&mutex);
-    return ret;
+    return 0;
 }
 
 /*
@@ -231,7 +176,7 @@ int alphanum_click_init(uint8_t bus)
     if (check_valid_mikrobus(bus) < 0) {
         fprintf(stderr, "alphanum: Invalid mikrobus index.\n");
         return -1;
-    }
+     }
 
     /* Setup GPIO */
     if (gpio_get_pin(bus, TYPE_RST, &gpio_pin_le2) < 0
@@ -251,33 +196,23 @@ int alphanum_click_init(uint8_t bus)
     ||  gpio_set_direction(gpio_pin_oe2, GPIO_OUTPUT) < 0)
         return -1;
 
-    if (pthread_mutex_init(&mutex, NULL) != 0) {
-        fprintf(stderr, "alphanum: Error while initialising mutex\n");
-        return -1;
-    }
+    return alphanum_click_select_left_display();
+}
 
-    if (pthread_create(&thread, NULL, refresh_display, NULL) < 0) {
-        pthread_mutex_destroy(&mutex);
+int alphanum_click_select_left_display(void)
+{
+    if (gpio_set_value(gpio_pin_oe, 1) < 0
+    ||  gpio_set_value(gpio_pin_oe2, 0) < 0)
         return -1;
-    }
 
     return 0;
 }
 
-int alphanum_click_release(void)
+int alphanum_click_select_right_display(void)
 {
-    int ret = 0;
-
-    thread_running = false;
-    if (pthread_join(thread, NULL))
-        ret = -1;
-    if (pthread_mutex_destroy(&mutex) < 0)
-        ret = -1;
-
-    if (gpio_release(gpio_pin_le2) < 0
-    ||  gpio_release(gpio_pin_oe) < 0
-    ||  gpio_release(gpio_pin_oe2) < 0)
-        ret = -1;
+    if (gpio_set_value(gpio_pin_oe2, 1) < 0
+    ||  gpio_set_value(gpio_pin_oe, 0) < 0)
+        return -1;
 
-    return ret;
+    return 0;
 }
