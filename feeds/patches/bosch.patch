diff --git a/include/letmecreate/bosch/bme280.h b/include/letmecreate/bosch/bme280.h
index 6e69bc9..b90c9ae 100755
--- a/include/letmecreate/bosch/bme280.h
+++ b/include/letmecreate/bosch/bme280.h
@@ -59,8 +59,6 @@
 #ifndef __BME280_H__
 #define __BME280_H__
 
-#include <letmecreate/bosch/export.h>
-
 /*!
 * @brief The following definition uses for define the data types
 *
@@ -873,7 +871,7 @@ struct bme280_t {
  *
  *
 */
-BME280_RETURN_FUNCTION_TYPE LETMECREATE_BOSCH_EXPORT bme280_init(struct bme280_t *bme280);
+BME280_RETURN_FUNCTION_TYPE bme280_init(struct bme280_t *bme280);
 /**************************************************************/
 /**\name	FUNCTION FOR  INTIALIZATION UNCOMPENSATED TEMPERATURE */
 /**************************************************************/
@@ -894,7 +892,7 @@ BME280_RETURN_FUNCTION_TYPE LETMECREATE_BOSCH_EXPORT bme280_init(struct bme280_t
  *
  *
 */
-BME280_RETURN_FUNCTION_TYPE LETMECREATE_BOSCH_EXPORT bme280_read_uncomp_temperature(
+BME280_RETURN_FUNCTION_TYPE bme280_read_uncomp_temperature(
 s32 *v_uncomp_temperature_s32);
 /**************************************************************/
 /**\name	FUNCTION FOR  INTIALIZATION TRUE TEMPERATURE */
@@ -912,7 +910,7 @@ s32 *v_uncomp_temperature_s32);
  *  @return Returns the actual temperature
  *
 */
-s32 LETMECREATE_BOSCH_EXPORT bme280_compensate_temperature_int32(s32 v_uncomp_temperature_s32);
+s32 bme280_compensate_temperature_int32(s32 v_uncomp_temperature_s32);
 /*!
  * @brief Reads actual temperature from uncompensated temperature
  * @note Returns the value with 500LSB/DegC centred around 24 DegC
@@ -926,7 +924,7 @@ s32 LETMECREATE_BOSCH_EXPORT bme280_compensate_temperature_int32(s32 v_uncomp_te
  *  @return Return the actual temperature as s16 output
  *
 */
-s16 LETMECREATE_BOSCH_EXPORT bme280_compensate_temperature_int32_sixteen_bit_output(
+s16 bme280_compensate_temperature_int32_sixteen_bit_output(
 s32 v_uncomp_temperature_s32);
 /**************************************************************/
 /**\name	FUNCTION FOR  INTIALIZATION UNCOMPENSATED PRESSURE */
@@ -950,7 +948,7 @@ s32 v_uncomp_temperature_s32);
  *
  *
 */
-BME280_RETURN_FUNCTION_TYPE LETMECREATE_BOSCH_EXPORT bme280_read_uncomp_pressure(
+BME280_RETURN_FUNCTION_TYPE bme280_read_uncomp_pressure(
 s32 *v_uncomp_pressure_s32);
 /**************************************************************/
 /**\name	FUNCTION FOR  INTIALIZATION TRUE PRESSURE */
@@ -970,7 +968,7 @@ s32 *v_uncomp_pressure_s32);
  *  @return Return the actual pressure output as u32
  *
 */
-u32 LETMECREATE_BOSCH_EXPORT bme280_compensate_pressure_int32(s32 v_uncomp_pressure_s32);
+u32 bme280_compensate_pressure_int32(s32 v_uncomp_pressure_s32);
 /**************************************************************/
 /**\name	FUNCTION FOR  INTIALIZATION UNCOMPENSATED HUMIDITY */
 /**************************************************************/
@@ -992,7 +990,7 @@ u32 LETMECREATE_BOSCH_EXPORT bme280_compensate_pressure_int32(s32 v_uncomp_press
  *
  *
 */
-BME280_RETURN_FUNCTION_TYPE LETMECREATE_BOSCH_EXPORT bme280_read_uncomp_humidity(
+BME280_RETURN_FUNCTION_TYPE bme280_read_uncomp_humidity(
 s32 *v_uncomp_humidity_s32);
 /**************************************************************/
 /**\name	FUNCTION FOR  INTIALIZATION RELATIVE HUMIDITY */
@@ -1011,7 +1009,7 @@ s32 *v_uncomp_humidity_s32);
  *  @return Return the actual relative humidity output as u32
  *
 */
-u32 LETMECREATE_BOSCH_EXPORT bme280_compensate_humidity_int32(s32 v_uncomp_humidity_s32);
+u32 bme280_compensate_humidity_int32(s32 v_uncomp_humidity_s32);
 /*!
  * @brief Reads actual humidity from uncompensated humidity
  * @note Returns the value in %rH as unsigned 16bit integer
@@ -1026,7 +1024,7 @@ u32 LETMECREATE_BOSCH_EXPORT bme280_compensate_humidity_int32(s32 v_uncomp_humid
  *  @return Return the actual relative humidity output as u16
  *
 */
-u16 LETMECREATE_BOSCH_EXPORT bme280_compensate_humidity_int32_sixteen_bit_output(
+u16 bme280_compensate_humidity_int32_sixteen_bit_output(
 s32 v_uncomp_humidity_s32);
 /**************************************************************/
 /**\name	FUNCTION FOR  INTIALIZATION UNCOMPENSATED PRESSURE,
@@ -1051,7 +1049,7 @@ s32 v_uncomp_humidity_s32);
  *
  *
 */
-BME280_RETURN_FUNCTION_TYPE LETMECREATE_BOSCH_EXPORT bme280_read_uncomp_pressure_temperature_humidity(
+BME280_RETURN_FUNCTION_TYPE bme280_read_uncomp_pressure_temperature_humidity(
 s32 *v_uncomp_pressure_s32,
 s32 *v_uncomp_temperature_s32, s32 *v_uncomp_humidity_s32);
 /**************************************************************/
@@ -1075,7 +1073,7 @@ s32 *v_uncomp_temperature_s32, s32 *v_uncomp_humidity_s32);
  *
  *
 */
-BME280_RETURN_FUNCTION_TYPE LETMECREATE_BOSCH_EXPORT bme280_read_pressure_temperature_humidity(
+BME280_RETURN_FUNCTION_TYPE bme280_read_pressure_temperature_humidity(
 u32 *v_pressure_u32, s32 *v_temperature_s32, u32 *v_humidity_u32);
 /**************************************************************/
 /**\name	FUNCTION FOR CALIBRATION */
@@ -1108,7 +1106,7 @@ u32 *v_pressure_u32, s32 *v_temperature_s32, u32 *v_humidity_u32);
  *
  *
 */
-BME280_RETURN_FUNCTION_TYPE LETMECREATE_BOSCH_EXPORT bme280_get_calib_param(void);
+BME280_RETURN_FUNCTION_TYPE bme280_get_calib_param(void);
 /**************************************************************/
 /**\name	FUNCTION FOR TEMPERATURE OVER SAMPLING */
 /**************************************************************/
@@ -1137,7 +1135,7 @@ BME280_RETURN_FUNCTION_TYPE LETMECREATE_BOSCH_EXPORT bme280_get_calib_param(void
  *
  *
 */
-BME280_RETURN_FUNCTION_TYPE LETMECREATE_BOSCH_EXPORT bme280_get_oversamp_temperature(
+BME280_RETURN_FUNCTION_TYPE bme280_get_oversamp_temperature(
 u8 *v_value_u8);
 /*!
  *	@brief This API is used to set
@@ -1164,7 +1162,7 @@ u8 *v_value_u8);
  *
  *
 */
-BME280_RETURN_FUNCTION_TYPE LETMECREATE_BOSCH_EXPORT bme280_set_oversamp_temperature(
+BME280_RETURN_FUNCTION_TYPE bme280_set_oversamp_temperature(
 u8 v_value_u8);
 /**************************************************************/
 /**\name	FUNCTION FOR PRESSURE OVER SAMPLING */
@@ -1194,7 +1192,7 @@ u8 v_value_u8);
  *
  *
 */
-BME280_RETURN_FUNCTION_TYPE LETMECREATE_BOSCH_EXPORT bme280_get_oversamp_pressure(
+BME280_RETURN_FUNCTION_TYPE bme280_get_oversamp_pressure(
 u8 *v_value_u8);
 /*!
  *	@brief This API is used to set
@@ -1221,7 +1219,7 @@ u8 *v_value_u8);
  *
  *
 */
-BME280_RETURN_FUNCTION_TYPE LETMECREATE_BOSCH_EXPORT bme280_set_oversamp_pressure(
+BME280_RETURN_FUNCTION_TYPE bme280_set_oversamp_pressure(
 u8 v_value_u8);
 /**************************************************************/
 /**\name	FUNCTION FOR HUMIDITY OVER SAMPLING */
@@ -1251,7 +1249,7 @@ u8 v_value_u8);
  *
  *
 */
-BME280_RETURN_FUNCTION_TYPE LETMECREATE_BOSCH_EXPORT bme280_get_oversamp_humidity(u8 *v_value_u8);
+BME280_RETURN_FUNCTION_TYPE bme280_get_oversamp_humidity(u8 *v_value_u8);
 /*!
  *	@brief This API is used to set
  *	the humidity oversampling setting in the register 0xF2
@@ -1291,7 +1289,7 @@ BME280_RETURN_FUNCTION_TYPE LETMECREATE_BOSCH_EXPORT bme280_get_oversamp_humidit
  *
  *
 */
-BME280_RETURN_FUNCTION_TYPE LETMECREATE_BOSCH_EXPORT bme280_set_oversamp_humidity(
+BME280_RETURN_FUNCTION_TYPE bme280_set_oversamp_humidity(
 u8 v_value_u8);
 /**************************************************************/
 /**\name	FUNCTION FOR POWER MODE*/
@@ -1315,7 +1313,7 @@ u8 v_value_u8);
  *
  *
 */
-BME280_RETURN_FUNCTION_TYPE LETMECREATE_BOSCH_EXPORT bme280_get_power_mode(u8 *v_power_mode_u8);
+BME280_RETURN_FUNCTION_TYPE bme280_get_power_mode(u8 *v_power_mode_u8);
 /*!
  *	@brief This API used to set the
  *	Operational Mode from the sensor in the register 0xF4 bit 0 and 1
@@ -1335,7 +1333,7 @@ BME280_RETURN_FUNCTION_TYPE LETMECREATE_BOSCH_EXPORT bme280_get_power_mode(u8 *v
  *
  *
 */
-BME280_RETURN_FUNCTION_TYPE LETMECREATE_BOSCH_EXPORT bme280_set_power_mode(u8 v_power_mode_u8);
+BME280_RETURN_FUNCTION_TYPE bme280_set_power_mode(u8 v_power_mode_u8);
 /**************************************************************/
 /**\name	FUNCTION FOR SOFT RESET*/
 /**************************************************************/
@@ -1354,7 +1352,7 @@ BME280_RETURN_FUNCTION_TYPE LETMECREATE_BOSCH_EXPORT bme280_set_power_mode(u8 v_
  *
  *
 */
-BME280_RETURN_FUNCTION_TYPE LETMECREATE_BOSCH_EXPORT bme280_set_soft_rst(void);
+BME280_RETURN_FUNCTION_TYPE bme280_set_soft_rst(void);
 /**************************************************************/
 /**\name	FUNCTION FOR SPI ENABLE*/
 /**************************************************************/
@@ -1378,7 +1376,7 @@ BME280_RETURN_FUNCTION_TYPE LETMECREATE_BOSCH_EXPORT bme280_set_soft_rst(void);
  *
  *
 */
-BME280_RETURN_FUNCTION_TYPE LETMECREATE_BOSCH_EXPORT bme280_get_spi3(u8 *v_enable_disable_u8);
+BME280_RETURN_FUNCTION_TYPE bme280_get_spi3(u8 *v_enable_disable_u8);
 /*!
  *	@brief This API used to set the sensor
  *	SPI mode(communication type) in the register 0xF5 bit 0
@@ -1399,7 +1397,7 @@ BME280_RETURN_FUNCTION_TYPE LETMECREATE_BOSCH_EXPORT bme280_get_spi3(u8 *v_enabl
  *
  *
 */
-BME280_RETURN_FUNCTION_TYPE LETMECREATE_BOSCH_EXPORT bme280_set_spi3(u8 v_enable_disable_u8);
+BME280_RETURN_FUNCTION_TYPE bme280_set_spi3(u8 v_enable_disable_u8);
 /**************************************************************/
 /**\name	FUNCTION FOR IIR FILTER*/
 /**************************************************************/
@@ -1425,7 +1423,7 @@ BME280_RETURN_FUNCTION_TYPE LETMECREATE_BOSCH_EXPORT bme280_set_spi3(u8 v_enable
  *
  *
 */
-BME280_RETURN_FUNCTION_TYPE LETMECREATE_BOSCH_EXPORT bme280_get_filter(u8 *v_value_u8);
+BME280_RETURN_FUNCTION_TYPE bme280_get_filter(u8 *v_value_u8);
 /*!
  *	@brief This API is used to write filter setting
  *	in the register 0xF5 bit 3 and 4
@@ -1448,7 +1446,7 @@ BME280_RETURN_FUNCTION_TYPE LETMECREATE_BOSCH_EXPORT bme280_get_filter(u8 *v_val
  *
  *
 */
-BME280_RETURN_FUNCTION_TYPE LETMECREATE_BOSCH_EXPORT bme280_set_filter(u8 v_value_u8);
+BME280_RETURN_FUNCTION_TYPE bme280_set_filter(u8 v_value_u8);
 /**************************************************************/
 /**\name	FUNCTION FOR STANDBY DURATION*/
 /**************************************************************/
@@ -1475,7 +1473,7 @@ BME280_RETURN_FUNCTION_TYPE LETMECREATE_BOSCH_EXPORT bme280_set_filter(u8 v_valu
  *
  *
 */
-BME280_RETURN_FUNCTION_TYPE LETMECREATE_BOSCH_EXPORT bme280_get_standby_durn(u8 *v_standby_durn_u8);
+BME280_RETURN_FUNCTION_TYPE bme280_get_standby_durn(u8 *v_standby_durn_u8);
 /*!
  *	@brief This API used to write the
  *	standby duration time from the sensor in the register 0xF5 bit 5 to 7
@@ -1509,7 +1507,7 @@ BME280_RETURN_FUNCTION_TYPE LETMECREATE_BOSCH_EXPORT bme280_get_standby_durn(u8
  *
  *
 */
-BME280_RETURN_FUNCTION_TYPE LETMECREATE_BOSCH_EXPORT bme280_set_standby_durn(u8 v_standby_durn_u8);
+BME280_RETURN_FUNCTION_TYPE bme280_set_standby_durn(u8 v_standby_durn_u8);
 /**************************************************************/
 /**\name	FUNCTION FOR WORK MODE*/
 /**************************************************************/
@@ -1555,7 +1553,7 @@ BME280_RETURN_FUNCTION_TYPE LETMECREATE_BOSCH_EXPORT bme280_set_standby_durn(u8
  *
 */
 BME280_RETURN_FUNCTION_TYPE
-LETMECREATE_BOSCH_EXPORT bme280_get_forced_uncomp_pressure_temperature_humidity(
+bme280_get_forced_uncomp_pressure_temperature_humidity(
 s32 *v_uncom_pressure_s32,
 s32 *v_uncom_temperature_s32, s32 *v_uncom_humidity_s32);
 /**************************************************************/
@@ -1578,7 +1576,7 @@ s32 *v_uncom_temperature_s32, s32 *v_uncom_humidity_s32);
  *
  *
  */
-BME280_RETURN_FUNCTION_TYPE LETMECREATE_BOSCH_EXPORT bme280_write_register(u8 v_addr_u8,
+BME280_RETURN_FUNCTION_TYPE bme280_write_register(u8 v_addr_u8,
 u8 *v_data_u8, u8 v_len_u8);
 /*!
  * @brief
@@ -1597,7 +1595,7 @@ u8 *v_data_u8, u8 v_len_u8);
  *
  *
  */
-BME280_RETURN_FUNCTION_TYPE LETMECREATE_BOSCH_EXPORT bme280_read_register(u8 v_addr_u8,
+BME280_RETURN_FUNCTION_TYPE bme280_read_register(u8 v_addr_u8,
 u8 *v_data_u8, u8 v_len_u8);
 /**************************************************************/
 /**\name	FUNCTION FOR FLOAT OUTPUT TEMPERATURE*/
@@ -1617,7 +1615,7 @@ u8 *v_data_u8, u8 v_len_u8);
  *  @return  Return the actual temperature in floating point
  *
 */
-double LETMECREATE_BOSCH_EXPORT bme280_compensate_temperature_double(
+double bme280_compensate_temperature_double(
 s32 v_uncom_temperature_s32);
 /**************************************************************/
 /**\name	FUNCTION FOR FLOAT OUTPUT PRESSURE*/
@@ -1635,7 +1633,7 @@ s32 v_uncom_temperature_s32);
  *  @return  Return the actual pressure in floating point
  *
 */
-double LETMECREATE_BOSCH_EXPORT bme280_compensate_pressure_double(s32 v_uncom_pressure_s32);
+double bme280_compensate_pressure_double(s32 v_uncom_pressure_s32);
 /**************************************************************/
 /**\name	FUNCTION FOR FLOAT OUTPUT HUMIDITY*/
 /**************************************************************/
@@ -1651,7 +1649,7 @@ double LETMECREATE_BOSCH_EXPORT bme280_compensate_pressure_double(s32 v_uncom_pr
  *  @return Return the actual humidity in floating point
  *
 */
-double LETMECREATE_BOSCH_EXPORT bme280_compensate_humidity_double(s32 v_uncom_humidity_s32);
+double bme280_compensate_humidity_double(s32 v_uncom_humidity_s32);
 #endif
 /**************************************************************/
 /**\name	FUNCTION FOR 64BIT OUTPUT PRESSURE*/
@@ -1673,7 +1671,7 @@ double LETMECREATE_BOSCH_EXPORT bme280_compensate_humidity_double(s32 v_uncom_hu
  *  @return Return the actual pressure in u32
  *
 */
-u32 LETMECREATE_BOSCH_EXPORT bme280_compensate_pressure_int64(s32 v_uncom_pressure_s32);
+u32 bme280_compensate_pressure_int64(s32 v_uncom_pressure_s32);
 /**************************************************************/
 /**\name	FUNCTION FOR 24BIT OUTPUT PRESSURE*/
 /**************************************************************/
@@ -1691,7 +1689,7 @@ u32 LETMECREATE_BOSCH_EXPORT bme280_compensate_pressure_int64(s32 v_uncom_pressu
  *  @return the actual pressure in u32
  *
 */
-u32 LETMECREATE_BOSCH_EXPORT bme280_compensate_pressure_int64_twentyfour_bit_output(
+u32 bme280_compensate_pressure_int64_twentyfour_bit_output(
 s32 v_uncom_pressure_s32);
 #endif
 /**************************************************************/
@@ -1710,6 +1708,6 @@ s32 v_uncom_pressure_s32);
  *
  *
  */
-BME280_RETURN_FUNCTION_TYPE LETMECREATE_BOSCH_EXPORT bme280_compute_wait_time(u8
+BME280_RETURN_FUNCTION_TYPE bme280_compute_wait_time(u8
 *v_delaytime_u8);
 #endif
