diff --git a/include/letmecreate/click/eve.h b/include/letmecreate/click/eve.h
index 4d53b6c..19b91d3 100644
--- a/include/letmecreate/click/eve.h
+++ b/include/letmecreate/click/eve.h
@@ -16,7 +16,6 @@
 #include <stdbool.h>
 #include <stdint.h>
 #include <letmecreate/click/ft800_defs.h>
-#include <letmecreate/click/export.h>
 
 /**
  * @brief Initialise the EVE click.
@@ -27,7 +26,7 @@
  * @param[in] mikrobus_index Index of the mikrobus (see #MIKROBUS_INDEX)
  * @return 0 if successful, -1 otherwise.
  */
-int LETMECREATE_CLICK_EXPORT eve_click_enable(uint8_t mikrobus_index);
+int eve_click_enable(uint8_t mikrobus_index);
 
 /**
  * @brief Shutdown EVE click.
@@ -35,7 +34,7 @@ int LETMECREATE_CLICK_EXPORT eve_click_enable(uint8_t mikrobus_index);
  * @param[in] mikrobus_index Index of the mikrobus (see #MIKROBUS_INDEX)
  * @return 0 if successful, -1 otherwise.
  */
-int LETMECREATE_CLICK_EXPORT eve_click_disable(uint8_t mikrobus_index);
+int eve_click_disable(uint8_t mikrobus_index);
 
 /*
  *******************************************************************************
@@ -53,17 +52,17 @@ int LETMECREATE_CLICK_EXPORT eve_click_disable(uint8_t mikrobus_index);
 /**
  * @brief Disable buffering.
  */
-void LETMECREATE_CLICK_EXPORT eve_click_disable_buffering(void);
+void eve_click_disable_buffering(void);
 
 /**
  * @brief Enable buffering.
  */
-void LETMECREATE_CLICK_EXPORT eve_click_enable_buffering(void);
+void eve_click_enable_buffering(void);
 
 /**
  * @return True if buffering is enabled, false otherwise.
  */
-bool LETMECREATE_CLICK_EXPORT eve_click_is_buffering_enabled(void);
+bool eve_click_is_buffering_enabled(void);
 
 /*
  *******************************************************************************
@@ -87,7 +86,7 @@ bool LETMECREATE_CLICK_EXPORT eve_click_is_buffering_enabled(void);
  * @param[in] b Blue component of the color to clear the screen with
  * @return 0 if successful, -1 otherwise
  */
-int LETMECREATE_CLICK_EXPORT eve_click_clear(uint8_t r, uint8_t g, uint8_t b);
+int eve_click_clear(uint8_t r, uint8_t g, uint8_t b);
 
 /**
  * @brief Add a graphics command in the buffer.
@@ -103,14 +102,14 @@ int LETMECREATE_CLICK_EXPORT eve_click_clear(uint8_t r, uint8_t g, uint8_t b);
  * @param[in] cmd Opcode of the command.
  * @return 0 if successful, -1 otherwise.
  */
-int LETMECREATE_CLICK_EXPORT eve_click_draw(uint32_t cmd, ...);
+int eve_click_draw(uint32_t cmd, ...);
 
 /**
  * @brief Flush the buffer and display the frame on the screen.
  *
  * @return 0 if successful, -1 otherwise.
  */
-int LETMECREATE_CLICK_EXPORT eve_click_display(void);
+int eve_click_display(void);
 
 /*
  *******************************************************************************
@@ -133,7 +132,7 @@ int LETMECREATE_CLICK_EXPORT eve_click_display(void);
  * @param[in] count Size in bytes of the image
  * @return 0 if successful, -1 otherwise.
  */
-int LETMECREATE_CLICK_EXPORT eve_click_load_image(uint32_t ptr, uint32_t options, const uint8_t *data, uint32_t count);
+int eve_click_load_image(uint32_t ptr, uint32_t options, const uint8_t *data, uint32_t count);
 
 /**
  * @brief Decompress data compressed with the deflate algorithm.
@@ -143,7 +142,7 @@ int LETMECREATE_CLICK_EXPORT eve_click_load_image(uint32_t ptr, uint32_t options
  * @param[in] count Size in bytes of the compressed data
  * @return 0 if successful, -1 otherwise.
  */
-int LETMECREATE_CLICK_EXPORT eve_click_inflate(uint32_t ptr, const uint8_t *data, uint32_t count);
+int eve_click_inflate(uint32_t ptr, const uint8_t *data, uint32_t count);
 
 /**
  * @brief Get the end address of the decompressed data
@@ -154,7 +153,7 @@ int LETMECREATE_CLICK_EXPORT eve_click_inflate(uint32_t ptr, const uint8_t *data
  * @param[out] ptr Last address of decompressed data (must not be null)
  * @return 0 if successful, -1 otherwise.
  */
-int LETMECREATE_CLICK_EXPORT eve_click_get_ptr(uint32_t *ptr);
+int eve_click_get_ptr(uint32_t *ptr);
 
 /*
  *******************************************************************************
@@ -170,7 +169,7 @@ int LETMECREATE_CLICK_EXPORT eve_click_get_ptr(uint32_t *ptr);
  *
  * @return 0 if successful, -1 otherwise.
  */
-int LETMECREATE_CLICK_EXPORT eve_click_load_identity(void);
+int eve_click_load_identity(void);
 
 /**
  * @brief Translate
@@ -181,7 +180,7 @@ int LETMECREATE_CLICK_EXPORT eve_click_load_identity(void);
  * @param[in] ty signed 16.16 fixed-point y coordinate
  * @return 0 if successful, -1 otherwise.
  */
-int LETMECREATE_CLICK_EXPORT eve_click_translate(int32_t tx, int32_t ty);
+int eve_click_translate(int32_t tx, int32_t ty);
 
 /**
  * @brief Scale
@@ -192,7 +191,7 @@ int LETMECREATE_CLICK_EXPORT eve_click_translate(int32_t tx, int32_t ty);
  * @param[in] sy signed 16.16 fixed-point y factor
  * @return 0 if successful, -1 otherwise.
  */
-int LETMECREATE_CLICK_EXPORT eve_click_scale(int32_t sx, int32_t sy);
+int eve_click_scale(int32_t sx, int32_t sy);
 
 /**
  * @brief Rotate
@@ -202,7 +201,7 @@ int LETMECREATE_CLICK_EXPORT eve_click_scale(int32_t sx, int32_t sy);
  * @param[in] angle Clockwise rotation angle in units of 1/65536 of a circle
  * @return 0 if successful, -1 otherwise.
  */
-int LETMECREATE_CLICK_EXPORT eve_click_rotate(int32_t angle);
+int eve_click_rotate(int32_t angle);
 
 /**
  * @brief Retrieve bitmap transformation matrix from FT800.
@@ -219,7 +218,7 @@ int LETMECREATE_CLICK_EXPORT eve_click_rotate(int32_t angle);
  * @param[out] f
  * @return 0 if successful, -1 otherwise.
  */
-int LETMECREATE_CLICK_EXPORT eve_click_get_matrix(int32_t *a, int32_t *b, int32_t *c,
+int eve_click_get_matrix(int32_t *a, int32_t *b, int32_t *c,
                          int32_t *d, int32_t *e, int32_t *f);
 
 /**
@@ -227,7 +226,7 @@ int LETMECREATE_CLICK_EXPORT eve_click_get_matrix(int32_t *a, int32_t *b, int32_
  *
  * @return 0 if successful, -1 otherwise.
  */
-int LETMECREATE_CLICK_EXPORT eve_click_set_matrix(void);
+int eve_click_set_matrix(void);
 
 /*
  *******************************************************************************
@@ -243,7 +242,7 @@ int LETMECREATE_CLICK_EXPORT eve_click_set_matrix(void);
  * @param[out] crc CRC of the memory region specified by ptr and byte_count (must not be null)
  * @return 0 if successful, -1 otherwise
  */
-int LETMECREATE_CLICK_EXPORT eve_click_memcrc(uint32_t ptr, uint32_t byte_count, uint32_t *crc);
+int eve_click_memcrc(uint32_t ptr, uint32_t byte_count, uint32_t *crc);
 
 /**
  * @brief Set memory region to a specific value.
@@ -253,7 +252,7 @@ int LETMECREATE_CLICK_EXPORT eve_click_memcrc(uint32_t ptr, uint32_t byte_count,
  * @param[in] byte_count Number of bytes to set
  * @return 0 if successful, -1 otherwise
  */
-int LETMECREATE_CLICK_EXPORT eve_click_memset(uint32_t ptr, uint32_t value, uint32_t byte_count);
+int eve_click_memset(uint32_t ptr, uint32_t value, uint32_t byte_count);
 
 /**
  * @brief Copy one region of memory to another one.
@@ -266,7 +265,7 @@ int LETMECREATE_CLICK_EXPORT eve_click_memset(uint32_t ptr, uint32_t value, uint
  * @param[in] byte_count Number of byte to copy from src to dest
  * @return 0 if successful, -1 otherwise
  */
-int LETMECREATE_CLICK_EXPORT eve_click_memcpy(uint32_t dest, uint32_t src, uint32_t byte_count);
+int eve_click_memcpy(uint32_t dest, uint32_t src, uint32_t byte_count);
 
 /**
  * @brief Set to zero a memory region.
@@ -275,7 +274,7 @@ int LETMECREATE_CLICK_EXPORT eve_click_memcpy(uint32_t dest, uint32_t src, uint3
  * @param[in] byte_count Number of byte to zeroed
  * @return 0 if successful, -1 otherwise
  */
-int LETMECREATE_CLICK_EXPORT eve_click_memzero(uint32_t ptr, uint32_t byte_count);
+int eve_click_memzero(uint32_t ptr, uint32_t byte_count);
 
 /*
  *******************************************************************************
@@ -290,7 +289,7 @@ int LETMECREATE_CLICK_EXPORT eve_click_memzero(uint32_t ptr, uint32_t byte_count
  *
  * @return 0 if successful, -1 otherwise.
  */
-int LETMECREATE_CLICK_EXPORT eve_click_ftdi_logo(void);
+int eve_click_ftdi_logo(void);
 
 /**
  * @brief Take a snapshot of the screen.
@@ -305,7 +304,7 @@ int LETMECREATE_CLICK_EXPORT eve_click_ftdi_logo(void);
  * @param[out] data Pointer to an array of bytes
  * @return 0 if successful, -1 otherwise.
  */
-int LETMECREATE_CLICK_EXPORT eve_click_snapshot(uint32_t ptr, uint8_t *data);
+int eve_click_snapshot(uint32_t ptr, uint8_t *data);
 
 /**
  * @brief Display a spinner.
@@ -318,21 +317,21 @@ int LETMECREATE_CLICK_EXPORT eve_click_snapshot(uint32_t ptr, uint8_t *data);
  * @param[in] scale Scaling coefficient. 0 for no scaling, 1: half screen, 2: full screen
  * @return 0 if successful, -1 otherwise.
  */
-int LETMECREATE_CLICK_EXPORT eve_click_spinner(int16_t x, int16_t y, uint16_t style, uint16_t scale);
+int eve_click_spinner(int16_t x, int16_t y, uint16_t style, uint16_t scale);
 
 /**
  * @brief Stop a spinner or a screensaver.
  *
  * @return 0 if successful, -1 otherwise.
  */
-int LETMECREATE_CLICK_EXPORT eve_click_stop(void);
+int eve_click_stop(void);
 
 /**
  * @brief Reset the coprocessor of the EVE click.
  *
  * @return 0 if successful, -1 otherwise.
  */
-int LETMECREATE_CLICK_EXPORT eve_click_coldstart(void);
+int eve_click_coldstart(void);
 
 /**
  * @brief Display a screensaver.
@@ -341,7 +340,7 @@ int LETMECREATE_CLICK_EXPORT eve_click_coldstart(void);
  *
  * @return 0 if successful, -1 otherwise.
  */
-int LETMECREATE_CLICK_EXPORT eve_click_screensaver(void);
+int eve_click_screensaver(void);
 
 /**
  * @brief Control the intensity of the backlight.
@@ -351,7 +350,7 @@ int LETMECREATE_CLICK_EXPORT eve_click_screensaver(void);
  * @param[in] intensity Must be in range 0..128
  * @return 0 if successful, -1 otherwise.
  */
-int LETMECREATE_CLICK_EXPORT eve_click_set_backlight_intensity(uint8_t intensity);
+int eve_click_set_backlight_intensity(uint8_t intensity);
 
 /*
  *******************************************************************************
@@ -374,7 +373,7 @@ int LETMECREATE_CLICK_EXPORT eve_click_set_backlight_intensity(uint8_t intensity
  * the touch point. If the screen is not touched, the screen coordinate is set
  * to (32768, 32768).
  */
-void LETMECREATE_CLICK_EXPORT eve_click_attach_touch_callback(void (*callback)(uint16_t, uint16_t));
+void eve_click_attach_touch_callback(void (*callback)(uint16_t, uint16_t));
 
 /**
  * @brief Attach a callback
@@ -384,7 +383,7 @@ void LETMECREATE_CLICK_EXPORT eve_click_attach_touch_callback(void (*callback)(u
  *
  * @param[in] callback
  */
-void LETMECREATE_CLICK_EXPORT eve_click_attach_touch_event_callback(void (*callback)(void));
+void eve_click_attach_touch_event_callback(void (*callback)(void));
 
 /**
  * @brief Calibrate touch screen.
@@ -395,7 +394,7 @@ void LETMECREATE_CLICK_EXPORT eve_click_attach_touch_event_callback(void (*callb
  *
  * @return 0 if successful, -1 otherwise.
  */
-int LETMECREATE_CLICK_EXPORT eve_click_calibrate(void);
+int eve_click_calibrate(void);
 
 /**
  * @brief Retrieve touch screen calibration matrix.
@@ -411,7 +410,7 @@ int LETMECREATE_CLICK_EXPORT eve_click_calibrate(void);
  * @param[out] f 15.15 fixed point number
  * @return 0 if successful, -1 otherwise.
  */
-int LETMECREATE_CLICK_EXPORT eve_click_get_calibration_matrix(uint32_t *a, uint32_t *b, uint32_t *c,
+int eve_click_get_calibration_matrix(uint32_t *a, uint32_t *b, uint32_t *c,
                                                               uint32_t *d, uint32_t *e, uint32_t *f);
 
 /**
@@ -425,6 +424,6 @@ int LETMECREATE_CLICK_EXPORT eve_click_get_calibration_matrix(uint32_t *a, uint3
  * @param[in] f 15.15 fixed point number
  * @return 0 if successful, -1 otherwise.
  */
-int LETMECREATE_CLICK_EXPORT eve_click_set_calibration_matrix(uint32_t a, uint32_t b, uint32_t c,
+int eve_click_set_calibration_matrix(uint32_t a, uint32_t b, uint32_t c,
                                                               uint32_t d, uint32_t e, uint32_t f);
 #endif
diff --git a/src/click/eve.c b/src/click/eve.c
index 41570a4..2237867 100644
--- a/src/click/eve.c
+++ b/src/click/eve.c
@@ -1,15 +1,15 @@
-#include <linux/spi/spidev.h>
 #include <stdarg.h>
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
-#include <time.h>
-#include <unistd.h>
+
+#include "sys/clock.h"
+
 #include <letmecreate/click/eve.h>
 #include <letmecreate/click/ft800_defs.h>
 #include <letmecreate/core/common.h>
 #include <letmecreate/core/gpio.h>
-#include <letmecreate/core/gpio_monitor.h>
+#include <letmecreate/core/interrupts.h>
 #include <letmecreate/core/spi.h>
 
 #define FIFO_SIZE               (4096)  /* 4KB */
@@ -32,12 +32,9 @@ static void (*touch_event_callback)(void) = NULL;
 
 static void sleep_ms(unsigned int ms)
 {
-    struct timespec rem, req;
-    req.tv_sec = ms / 1000;
-    req.tv_nsec = (ms - req.tv_sec * 1000) * 1000000;
-
-    while (nanosleep(&req, &rem))
-        req = rem;
+    unsigned int i;
+    for(i = 0; i < ms; i++)
+        clock_delay_usec(1000);
 }
 
 static int send_command(uint8_t cmd)
@@ -870,18 +867,14 @@ static int attach_interrupt_handler(uint8_t mikrobus_index)
     case MIKROBUS_1:
         int_pin = MIKROBUS_1_INT;
         break;
-    case MIKROBUS_2:
-        int_pin = MIKROBUS_2_INT;
-        break;
     default:
         return -1;
     }
 
-    if (gpio_init(int_pin) < 0
-    ||  gpio_monitor_init() < 0)
+    if (gpio_init(int_pin) < 0)
         return -1;
 
-    if ((int_callback_id = gpio_monitor_add_callback(int_pin, GPIO_FALLING, interrupt_handler)) < 0)
+    if (interrupt_configure(interrupt_handler) < 0)
         return -1;
 
     return 0;
@@ -895,9 +888,6 @@ static int detach_interrupt_handler(uint8_t mikrobus_index)
     case MIKROBUS_1:
         int_pin = MIKROBUS_1_INT;
         break;
-    case MIKROBUS_2:
-        int_pin = MIKROBUS_2_INT;
-        break;
     default:
         return -1;
     }
@@ -905,7 +895,7 @@ static int detach_interrupt_handler(uint8_t mikrobus_index)
     if (int_callback_id < 0)
         return 0;
 
-    if (gpio_monitor_remove_callback(int_callback_id) < 0)
+    if (interrupt_configure(NULL) < 0)
         return -1;
 
     int_callback_id = -1;
@@ -931,9 +921,6 @@ static int ft800_power(uint8_t bus_index, bool enable)
     case MIKROBUS_1:
         pd_n_pin = MIKROBUS_1_RST;
         break;
-    case MIKROBUS_2:
-        pd_n_pin = MIKROBUS_2_RST;
-        break;
     default:
         return -1;
     }
@@ -956,9 +943,6 @@ static int ft800_use_spi(uint8_t bus_index)
     case MIKROBUS_1:
         mode_pin = MIKROBUS_1_AN;
         break;
-    case MIKROBUS_2:
-        mode_pin = MIKROBUS_2_AN;
-        break;
     default:
         return -1;
     }
